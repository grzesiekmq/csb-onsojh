{"version":3,"sources":["src/index.js"],"names":["MAX_CHAR","sortAndRun","str","a","txt","sortString","Set","letters","Array","i","x","length","charCodeAt","j","String","fromCharCode","text","document","querySelector","textContent","compressedText","toString"],"mappings":";AAgDwB,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,oBAAA,QAAA,EAAA,OAAA,WAAA,EAAA,cAAA,IAAA,EAAA,CAAA,GAAA,MAAA,QAAA,KAAA,EAAA,EAAA,KAAA,GAAA,GAAA,iBAAA,EAAA,OAAA,CAAA,IAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,aAAA,MAAA,CAAA,EAAA,EAAA,EAAA,WAAA,OAAA,GAAA,EAAA,OAAA,CAAA,MAAA,GAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,SAAA,GAAA,MAAA,GAAA,EAAA,GAAA,MAAA,IAAA,UAAA,yIAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,EAAA,WAAA,EAAA,EAAA,KAAA,IAAA,EAAA,WAAA,IAAA,EAAA,EAAA,OAAA,OAAA,EAAA,EAAA,KAAA,GAAA,EAAA,SAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,WAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,KAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAhDxB,IAAIA,EAAW,GACf,SAASC,EAAWC,GAClB,IAE+B,EAF3BC,EAAI,GACJC,EAAMC,EAAWH,GACF,EAAA,EAAA,IAAII,IAAIF,IAAI,IAA/B,IAAiC,EAAA,MAAA,EAAA,EAAA,KAAA,MAAA,CAC/BD,GADa,EAAA,OAEd,MAAA,GAAA,EAAA,EAAA,GAAA,QAAA,EAAA,IACD,OAAOA,EAGT,SAASE,EAAWH,GAGlB,IADA,IAAIK,EAAU,IAAIC,MAAMR,GACfS,EAAI,EAAGA,EAAIT,EAAUS,IAC5BF,EAAQE,GAAK,EAKf,IAAK,IAAIC,EAAI,EAAGA,EAAIR,EAAIS,OAAQD,IAI9BH,EAAQL,EAAIQ,GAAGE,WAAW,GAAK,IAAIA,WAAW,MAKhD,IADA,IAAIR,EAAM,GACDK,EAAI,EAAGA,EAAIT,EAAUS,IAC5B,IAAK,IAAII,EAAI,EAAGA,EAAIN,EAAQE,GAAII,IAC9BT,GAAOU,OAAOC,aAAaN,EAAI,IAAIG,WAAW,IAGlD,OAAOR,EAET,IAAMY,EAAO,cACbC,SAASC,cAAc,aAAaC,aAAe,KAAOH,EAE1D,IAAMI,EAAiBnB,EAAWe,GAClCC,SAASC,cAAc,eAAeC,aAAe,KAAOC,EAC5DH,SAASC,cAAc,eAAeC,YACpC,cAAgBC,EAAeT,OAASK,EAAKL,OAC/CM,SAASC,cAAc,eAAeC,YACpC,gBAAkB,EAAIC,EAAeT,OAASK,EAAKL,QACrDM,SAASC,cAAc,oBAAoBC,YACzC,oBACAC,EAAeT,OAAOU,WACtB,IACAL,EAAKL,OAAOU","file":"src.df43450c.js","sourceRoot":"..","sourcesContent":["let MAX_CHAR = 26;\nfunction sortAndRun(str) {\n  let a = \"\";\n  let txt = sortString(str);\n  for (const item of new Set(txt)) {\n    a += item;\n  }\n  return a;\n}\n// function to print string in sorted order\nfunction sortString(str) {\n  // Hash array to keep count of characters.\n  let letters = new Array(MAX_CHAR);\n  for (let i = 0; i < MAX_CHAR; i++) {\n    letters[i] = 0;\n  }\n\n  // Traverse string and increment\n  // count of characters\n  for (let x = 0; x < str.length; x++) {\n    // 'a'-'a' will be 0, 'b'-'a' will be 1,\n    // so for location of character in count\n    // array we will do str[i]-'a'.\n    letters[str[x].charCodeAt(0) - \"a\".charCodeAt(0)]++;\n  }\n  // Traverse the hash array and print\n  // characters\n  let txt = \"\";\n  for (let i = 0; i < MAX_CHAR; i++) {\n    for (let j = 0; j < letters[i]; j++) {\n      txt += String.fromCharCode(i + \"a\".charCodeAt(0));\n    }\n  }\n  return txt;\n}\nconst text = \"abrakadabra\";\ndocument.querySelector(\"#original\").textContent += \": \" + text;\n// Driver program to test above function\nconst compressedText = sortAndRun(text);\ndocument.querySelector(\"#algoResult\").textContent += \": \" + compressedText;\ndocument.querySelector(\"#compressed\").textContent =\n  \"compressed \" + compressedText.length / text.length;\ndocument.querySelector(\"#savedSpace\").textContent =\n  \"space saved \" + (1 - compressedText.length / text.length);\ndocument.querySelector(\"#compressedRatio\").textContent =\n  \"compressed ratio \" +\n  compressedText.length.toString() +\n  \"/\" +\n  text.length.toString();\n"]}